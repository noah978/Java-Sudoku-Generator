#BlueJ class context
comment0.target=SudokuBoard
comment0.text=\r\n\ Write\ a\ description\ of\ class\ SodokuBoard\ here.\r\n\ \r\n\ @Noah\ Keck\r\n\ @v1.2.2\r\n\ @2/16/2018\r\n
comment1.params=
comment1.target=SudokuBoard()
comment1.text=\r\n\ Use\ this\ constructor\ to\ set\ the\ default\ size\ of\ board\r\n
comment10.params=r\ c\ boardCopy
comment10.target=boolean\ checkForOneSolution(int,\ int,\ int[][])
comment10.text=\r\n\ This\ method\ should\ check\ every\ possible\ combination\ of\ numbers\ to\ see\ if\ its\ a\ valid\ solution.\r\n\ It\ should\ finally\ return\ true\ when\ the\ first\ blank\ number\ it\ checked\ runs\ out\ of\ numbers\ to\ check.\r\n\ \r\n\ @param\ r\ current\ row\r\n\ @param\ c\ current\ column\r\n\ @param\ boardCopy\ the\ numbers\ remaining\ in\ a\ sudoku\ grid\r\n
comment11.params=
comment11.target=int[][]\ convertToMatrix()
comment12.params=r\ c\ num
comment12.target=boolean\ checkSquare(int,\ int,\ int)
comment13.params=r\ num
comment13.target=boolean\ checkRow(int,\ int)
comment14.params=c\ num
comment14.target=boolean\ checkColumn(int,\ int)
comment15.params=r\ c\ num\ boardCopy
comment15.target=boolean\ checkSquare(int,\ int,\ int,\ int[][])
comment15.text=\r\n\ @param\ r\ the\ row\ of\ cell\ 0-8\r\n\ @param\ c\ the\ column\ of\ cell\ 0-8\r\n\ @param\ num\ the\ number\ its\ checking\ for\ 1-9\r\n
comment16.params=r\ num\ boardCopy
comment16.target=boolean\ checkRow(int,\ int,\ int[][])
comment16.text=\r\n\ @param\ r\ the\ row\ of\ cell\ 0-8\r\n\ @param\ num\ the\ number\ its\ checking\ for\ 1-9\r\n
comment17.params=c\ num\ boardCopy
comment17.target=boolean\ checkColumn(int,\ int,\ int[][])
comment17.text=\r\n\ @param\ c\ the\ column\ of\ cell\ 0-8\r\n\ @param\ num\ the\ number\ its\ checking\ for\ 1-9\r\n
comment18.params=number
comment18.target=greenfoot.GreenfootImage\ getImageNumber(int)
comment19.params=number
comment19.target=greenfoot.GreenfootImage\ getBlueImageNumber(int)
comment2.params=size
comment2.target=SudokuBoard(int)
comment2.text=\r\n\ Creates\ a\ new\ SodokuBoard\ based\ on\ given\ size\ used\ as\ a\ multiplier\r\n\ \r\n\ @param\ size\ values\ 1\ through\ 4,\ 1\ is\ the\ smallest,\ 4\ is\ the\ largest\r\n
comment20.params=number
comment20.target=greenfoot.GreenfootImage\ getRedImageNumber(int)
comment21.params=
comment21.target=greenfoot.GreenfootImage\ getBlankSquare()
comment22.params=
comment22.target=greenfoot.GreenfootImage\ getCursorSquare()
comment23.params=orig
comment23.target=greenfoot.GreenfootImage\ getMiniNumbers(java.util.ArrayList)
comment23.text=\r\n\ Returns\ a\ GreenfootImage\ of\ all\ 9\ possible\ numbers\ as\ a\ single\ cell\ image.\r\n\ The\ method\ will\ only\ add\ the\ numbers\ based\ on\ the\ number\ array\ given;\r\n
comment24.params=
comment24.target=void\ saveWorldAsImage()
comment24.text=\r\n\ Saves\ an\ image\ of\ the\ generated\ Sudoku\ to\ the\ same\ folder\ as\ the\ greenfoot\ project.\r\n
comment3.params=
comment3.target=void\ act()
comment4.params=
comment4.target=void\ loadContent()
comment5.params=
comment5.target=void\ createCells()
comment6.params=
comment6.target=void\ createBoard()
comment6.text=\r\n\ Sudoku\ creation\ will\ be\ done\ in\ the\ order\ of\ these\ steps\:\r\n\ \r\n\ 1.\ Assign\ values\ to\ each\ cell\ in\ the\ grid.\r\n\ 2.\ Set\ the\ images\ to\ each\ cell.\r\n\ 3.\ Remove\ images\ in\ groups,\ ensuring\ that\ the\ puzzle\ only\ has\ one\ solution\r\n\ 4.\ Puzzle\ is\ completed\ once\ 20-30\ clues\ /\ images\ remain\r\n
comment7.params=r\ c
comment7.target=boolean\ setNums(int,\ int)
comment7.text=\r\n\ Sets\ a\ blank\ grid\ of\ cells\ to\ numbers\ that\ follow\ sudoku\ rules\ using\ recursion.\r\n\ \r\n\ @param\ r\ current\ row\r\n\ @param\ c\ current\ column\r\n
comment8.params=
comment8.target=boolean\ removeNums()
comment8.text=\r\n\ Converts\ to\ a\ matrix\ of\ integers\ first.\ Then\ removes\ a\ specific\ group\ of\ numbers\ based\ on\ the\ clue\ count.\r\n\ It\ checks\ that\ the\ removed\ numbers\ leave\ one\ unique\ solution.\ If\ it\ does,\ it\ also\ removes\ this\ from\ the\ board.\r\n\ If\ it\ doesn't\ work,\ it\ recreates\ the\ integer\ matrix\ and\ trys\ again.\r\n
comment9.params=r\ c\ clueCount\ remain\ boardCopy
comment9.target=boolean\ removeNums(int,\ int,\ int,\ int,\ int[][])
comment9.text=\r\n\ \r\n
numComments=25
